const axios = require('axios');
const express = require('express');
const app = express();
const http = require('http');
const server = http.createServer(app);

const tokens = [
    'توكنك',
];

const targetChannelId = 'ايدي الروم';
const mentionId = '<@ايدي الي تمنشنه>';

const messages = [
    'شقمك',
    'حرقمك',
    'بصعمك',
    'فتحمك',
    'بحوي كسم الي جابتك',
    'ياولد الجرار',
    'انيك كسمك يبن القحاب',
    'و ادحش بكسمك زوبر عملاق',
    'و انيك كسمك بكل زمان',
    'و اضرب كسمك بكل مكان',
    'و اشنق كسمك بين الابعاد',
    'و اعسل كسمك المتناك',
    'تزبيل كسمك المنكوح',
    'و جعل كسمك قحبه منيوك',
    'تحليه كسمك',
    'نيك كسمك',
    'كسمك',
    'كسختك',
    'كسعمتك',
];

function uptimeMonitor() {
    setInterval(() => {
        console.log(`Uptime: ${Math.floor(process.uptime())} seconds`);
    }, 300000);
}

function keepAlive() {
    setInterval(() => {
        console.log("Keep alive!");
    }, 300000);
}

async function sendMessage(token, channelId, message, mention) {
    try {
        await axios.post(`https://discord.com/api/v10/channels/${channelId}/typing`, {}, {
            headers: {
                Authorization: `${token}`
            }
        });

        setTimeout(async () => {
            try {
                const response = await axios.post(`https://discord.com/api/v10/channels/${channelId}/messages`, {
                    content: `${mention} ${message}`
                }, {
                    headers: {
                        Authorization: `${token}`,
                        'Content-Type': 'application/json'
                    }
                });

                console.log(`Message sent successfully with token ${token}: ${message} to ${mention}`);
            } catch (error) {
                if (error.response && error.response.status === 429) {
                    console.log(`Rate limit exceeded for token ${token}. Waiting for ${error.response.data.retry_after}ms and retrying...`);
                    await new Promise(resolve => setTimeout(resolve, error.response.data.retry_after));
                    await sendMessage(token, channelId, message, mention);
                } else if (error.response && error.response.status === 400) {
                    console.error(`Bad Request (400) with token ${token}:`, error.response.data);
                } else {
                    console.error(`Failed to send message with token ${token}:`, error.response ? error.response.data : error.message);
                }
            }
        }, 400);
    } catch (error) {
        if (error.response && error.response.status === 400) {
            console.error(`Bad Request (400) with token ${token}:`, error.response.data);
        } else {
            console.error(`Failed to start typing with token ${token}:`, error.response ? error.response.data : error.message);
        }
    }
}

async function main() {
    const interval = 1200;

    while (true) {
        for (const message of messages) {
            await Promise.all(tokens.map(token => sendMessage(token, targetChannelId, message, mentionId)));
            await new Promise(resolve => setTimeout(resolve, interval));
        }
    }
}

app.get('/', (req, res) => {
    res.send(`
        <body>
            <center><h1>كسمك يا علاوي</h1></center>
        </body>
    `);
});

app.get('/webview', (req, res) => {
    res.setHeader('Content-Type', 'text/html');
    res.send(`
        <html>
            <head>
                <title>كسمك يا لحن</title>
            </head>
            <body style="margin: 0; padding: 0;">
                <iframe width="100%" height="100%" src="https://axocoder.vercel.app/" frameborder="0" allowfullscreen></iframe>
            </body>
        </html>
    `);
});

server.listen(8080, () => {
    console.log("Server is running on port 8080...");
    uptimeMonitor();
    keepAlive();
    main();
});
